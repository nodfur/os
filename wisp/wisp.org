* Wisp: image-based Lisp for WebAssembly
** Wisp REPL
** Wisp Continuations
** Wisp Images
** Wisp Library
** Wisp Inspector
** Wisp Remote
** Wisp Emacs
** Wisp DOM
** Wisp React
** Wisp Threads
** Wisp Cluster

* Wisp Internals

** Memory Layout

   A wisp word is 32 bits.

   The least 3 significant bits hold a tag, the /lowtag/.

*** Lowtag values

    |-----+-----+-----------------|
    | Tag | Hex | Type            |
    |-----+-----+-----------------|
    | 000 | 0x0 | FIXNUM          |
    | 001 | 0x1 | FUNCTION-PTR    |
    | 010 | 0x2 | OTHER-IMMEDIATE |
    | 011 | 0x3 | LIST-PTR        |
    | 100 | 0x4 | FIXNUM          |
    | 101 | 0x5 | STRUCT-PTR      |
    | 110 | 0x6 | OTHER-IMMEDIATE |
    | 111 | 0x7 | OTHER-PTR       |
    |-----+-----+-----------------|


*** Symbols

    A symbol is an OTHER-PTR to a SYMBOL-DATA.

    But NIL is also used as a LIST-PTR.



*** Packages

    A package is an OTHER-PTR

** CEK Machine

   To evaluate Lisp code, we use a style of interpreter
   known in the literature as the CEK machine, named after
   its three registers: Control, Environment, Kontinuation.

   We call the registers `term`, `scopes`, and `plan`.

   See the [[file:wisp.c::wisp_step (wisp_machine_t *machine)][`wisp_step()`]] function.

*** Plans

    | Plan              | Meaning             |
    |-------------------+---------------------|
    | NIL               | Computation is done |
    | [APPLY vs ts e k] |                     |
    | [CALL vs e k]     |                     |

    A call like `(f x y)` ...

* Diary

** [2022-01-27 Thu]

   I've got a REPL working in the command line.

   Compiling to WebAssembly works, but I don't have a way to
   run the REPL in the browser.  That would be awesome.

   The next thing to do I think is heap saving and loading.
   That should be easy.

*** TODO Output a heap image
*** TODO Load a heap image

* Local Variables :noexport:
  Local Variables:
  fill-column: 60
  End:
