* Journal

** [2022-01-29 Sat]

*** Wisp

    Generally, the VM seems to be basically working: we've got

      - a memory layout for objects that's based on the CMUCL & SBCL
        scheme of 3-bit tags;
      - a basic system of packages and symbols in the Common Lisp
        style; and
      - a small-step interpreter that uses heap-allocated
        structures as continuation contexts.

    I'm pretty close to being able to write and load heap files.
    That's without any concern for stability of the format.

    There's no garbage collection yet.

    I've become a bit confused about Lisp language traditions and what
    I want Wisp to be like.

    The Common Lisp tradition is my favorite because of the way it
    resembles a virtual machine environment, I guess?  The conditional
    restart system is a great example: when an error occurs in a real
    system, there's often something you can do to solve it on the spot
    instead of just crashing.  That's how I want computers to work in
    general, and it's definitely something I want in Wisp.

    But I don't really want to be limited by the ANSI Common Lisp
    standard.  In particular, I want first-class composable
    continuations.  Why?  Well, it just makes sense to be able to do
    various things with continuations, especially for implementing
    concurrency and backtracking and stuff like that.  That's why
    there are Common Lisp packages for transforming code into
    continuation-passing style.  Even Ruby has callcc.  It's like a
    low-hanging fruit of language design.

    I think Wisp probably ought to be written in Rust, or Zig, rather
    than C, but C is just easier for me right now.  In a way, Wisp is
    the anti-Rust, or like I would consider Rust a way to bootstrap a
    Lisp, but also to write fast Lisp extension modules.  The current
    code base could probably be translated to Zig in a few days.
    Actually Zig can even translate C to Zig, but it didn't work on
    Wisp for some seemingly minor reason.

    What's my real dream with Wisp, though?

    OK, it's like, I always wanted my computer to be something more
    like a "Lisp Machine."  Emacs gives me some of that, but it's not
    optimal even as just a Lisp interpreter.  It definitely doesn't
    support delimited continuations; it only got lexical scoping
    recently.  Although it's relatively advanced in terms of bytecode
    and JIT compilation.  Concurrency is kind of a joke.  So there's
    Common Lisp and McCLIM and stuff, which is beautiful and amazing.

    It's kind of underrated still how Common Lisp is stable since its
    ANSI standardization in 1994 but still has deep qualities that are
    lacking in contemporary systems.  It's really quite a competent
    design; well, it's a merger of several live Lisp traditions going
    back to the 1950s.  The object system itself is a minor miracle.
    The full compiler is always available at runtime for dynamic
    compilation.  The conditional restart system makes almost all
    errors recoverable either automatically or by manual intervention.
    The whole state of the system can be saved as core snapshots that
    reload instantly.

    OK, well, I started seeing people talk about WebAssembly as a new
    crucial platform.  It's in the major web browsers and strongly
    supported by everyone.  It runs in Node, Deno, a couple of
    different native runtimes like Wasmtime, embedded as a library, on
    cloud edge computing platforms, in Kubernetes, and so on.
    Probably it will run inside the Linux kernel soon enough, like the
    eBPF thing.

    #+BEGIN_QUOTE
    WasmEdge is a lightweight, high-performance, and extensible
    WebAssembly runtime for cloud native, edge, and decentralized
    applications. It powers serverless apps, embedded functions,
    microservices, smart contracts, and IoT devices.
    #+END_QUOTE

    So it's not just a thing for making 3D games that run in Chrome,
    or whatever.  It's like a new platform for sandboxed compiled
    low-level code.  So it's not Java, it's much simpler than that,
    it's not a whole platform bundle.
